<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>From photons to science</title><link href="http://karenyyng.github.io/" rel="alternate"></link><link href="http://karenyyng.github.io/feeds/k-y-ng.atom.xml" rel="self"></link><id>http://karenyyng.github.io/</id><updated>2015-01-07T00:00:00-08:00</updated><entry><title>My favorite IPython tips and tricks</title><link href="http://karenyyng.github.io/my-favorite-ipython-tips-and-tricks.html" rel="alternate"></link><updated>2015-01-07T00:00:00-08:00</updated><author><name>K. Y. Ng</name></author><id>tag:karenyyng.github.io,2015-01-07:my-favorite-ipython-tips-and-tricks.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will show you the first &lt;code&gt;l1&lt;/code&gt; to &lt;code&gt;l2&lt;/code&gt; lines of the history of the
(n-1)-to-last ipython session.  &lt;/p&gt;</summary><category term="IPython"></category></entry><entry><title>Using Virtualenv for safeguarding research project dependencies</title><link href="http://karenyyng.github.io/using-virtualenv-for-safeguarding-research-project-dependencies.html" rel="alternate"></link><updated>2014-12-24T18:30:00-08:00</updated><author><name>K. Y. Ng</name></author><id>tag:karenyyng.github.io,2014-12-24:using-virtualenv-for-safeguarding-research-project-dependencies.html</id><summary type="html">&lt;h3&gt;Why virtualenv&lt;/h3&gt;
&lt;p&gt;It’s a tragedy whenever a code breaks after a software “update”.
I have recently started using virtualenv for python to prevent my
macport / apt-get updates from messing up the code of my research projects.
Additionally, by providing a list of python package version, it can
enhance reproducibility.
Before I forget how to set it up correctly,
I should write about it.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;I will use python 2.7 and assume the use of macport for this post.
You should also have   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;py27-virtualenv&lt;/li&gt;
&lt;li&gt;pip &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;installed, either with &lt;code&gt;pip&lt;/code&gt; or &lt;code&gt;macport&lt;/code&gt; or &lt;code&gt;apt-get&lt;/code&gt; or if you like, from
source. I think you also can replace pip with easy_install if you prefer
easy_install instead.
I also assume you know some basic shell commands.&lt;/p&gt;
&lt;h3&gt;How to create virtualenv&lt;/h3&gt;
&lt;p&gt;If you just want to use virtualenv for the same version python as the
system wide version, at a terminal, call the executable of virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv-27 --no-site-packages ENVNAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command could also be &lt;code&gt;virtualenv&lt;/code&gt; for some people. 
I assumed that &lt;code&gt;virtualenv&lt;/code&gt; was installed using &lt;code&gt;macport&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;creating virtualenv this way will instruct that the paths inside the virtual env not to include path the system wide python packages
(using &lt;code&gt;–no-site-packages&lt;/code&gt; seems to be the default behavior for virtualenv but let me just mention that)
After this command, whatever python packages installed to the &lt;code&gt;PATH&lt;/code&gt; variable
in the shell configuration file (e.g. .bashrc / .bash_profile) will be
ignored when the virtualenv is activated.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Caveats&lt;/h4&gt;
&lt;p&gt;Note if you have python packages path set as part of &lt;code&gt;PYTHONPATH&lt;/code&gt;, your
virtualenv will not work properly so you will want to remove any system
wide python packages from your &lt;code&gt;PYTHONPATH&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once the command above is done executing, a folder with ENVNAME will be created that has the structure for installing its own set of python packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls ENVNAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will show you the following directory structure &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bin include lib share
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, you want to figure out what packages to install and what not to install.
These packages will be installed within the &lt;code&gt;ENVNAME&lt;/code&gt; directory structure,
more specifically inside: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;APPROPRAITE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ENVNAME&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/lib/python2.7/site-packages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let’s try to activate the virtual env:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;APPROPRIATE_PATH/ENVNAME/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you terminal prompt will change to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(ENVNAME)$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;check if the pip inside this environment is a local version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(ENVNAME)$ which pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;should show&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(ENVNAME)$ ENVNAME/bin/pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can feel free to use this local version of pip to install whatever
packages you want.&lt;/p&gt;
&lt;h3&gt;Saving package version and reinstalling packages&lt;/h3&gt;
&lt;p&gt;Let's say you have installed a bunch of packages for a specific coding
project and you want to save the package used and the respective version.
We can have the pip list all the python packages you have
installed and save it somewhere&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENVNAME&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip freeze &amp;gt; packages.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's say you want to set up the same virtual environment on another
machine.
Now you can copy over "packages.txt", set up the machine using the steps
above, then reinstall your packages within this local environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENVNAME&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install -r packages.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which may or may not work well depending on if you have external source of packages.&lt;/p&gt;
&lt;p&gt;Let’s say you are like me and have installed some python packages from non-conventional sources, one hackish way to make sure those will be installed properly in the virtualenv is to just copy the directory containing installed python packages to the local environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;ENVNAME&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp -r PATH1 APPROPRAITE_PATH/ENVNAME/python2.7/site-packages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;PATH1&lt;/code&gt; is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;PATH1
&lt;span class="s2"&gt;&amp;quot;/TIME_MACHINE_BACKUP/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python/2.7/site-packages/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can check if the library versions are alright:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENVNAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0.4&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;while you can check that the system wide version of the library has a
different version after deactivating the virtual env&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;APPROPRAITE_PATH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ENVNAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;deactivate&lt;/span&gt;  
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;astropy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;astropy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0.4.1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Automating virtualenv activation&lt;/h3&gt;
&lt;p&gt;Last bit of this post is about being lazy and having the virtualenv automatically activate itself
when you switch to the appropriate directory using command line.&lt;/p&gt;
&lt;p&gt;You will need the python package &lt;code&gt;autoenv&lt;/code&gt; which can be installed by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install autoenv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source &lt;/span&gt;&lt;span class="nv"&gt;$PATH_TO_AUTOENV&lt;/span&gt;&lt;span class="s2"&gt;/activate.sh&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$APPROPRIATE_PATH&lt;/span&gt;/ &lt;span class="c"&gt;# this is the parent directory where ENVNAME lives&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source ABSOLUTE_PATH/ENVNAME/bin/activate&amp;quot;&lt;/span&gt; &amp;gt; .env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now whenever you switch to the appropriate directory,
the virtual env will be activated for you.&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;If you see any weird behavior for importing modules in the virtualenv or
when using pytest, make sure that you are using versions of python packages
installed from within the virtualenv and not the system version.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;creating virtualenv for a different python version&lt;/h3&gt;
&lt;p&gt;let's say that I use python 2.7 for most of my projects and 
would like to play with python 3.4 i can first install python version 3.4
using macport by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo port install python34 py34-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then the only difference when creating the virtualenv is to specify using
python 3.4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv -p &lt;span class="k"&gt;$(&lt;/span&gt;which python3.4&lt;span class="k"&gt;)&lt;/span&gt; ENVNAME --distribute
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;</summary><category term="Python"></category><category term="reproducible science"></category></entry><entry><title>New year resolution + 1st post</title><link href="http://karenyyng.github.io/new-year-resolution-1st-post.html" rel="alternate"></link><updated>2014-12-24T17:00:00-08:00</updated><author><name>K. Y. Ng</name></author><id>tag:karenyyng.github.io,2014-12-24:new-year-resolution-1st-post.html</id><summary type="html">&lt;p&gt;One thing that I greatly admire my advisor, Prof. D. Wittman, for is that he is extremely
well spoken and explains things very clearly.&lt;br /&gt;
Now as a science student I think this is a very important ability that I
still need to improve on. By setting up this blog I hope to force myself
to explain and share with others the mini-projects / ideas that I am
working / have worked on. &lt;/p&gt;</summary></entry></feed>